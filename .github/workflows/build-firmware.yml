#
# 这是一份经过深度优化和验证的 GitHub Actions Workflow 文件
# 用于编译支持 msm8916 平台的 ImmortalWrt 固件。
#
# 文件名: build-immortalwrt.yml
# 放置位置: 您的 GitHub 仓库的 .github/workflows/ 目录下
#

name: Build ImmortalWrt for msm8916

on:
  # 允许您在 Actions 标签页手动触发此工作流
  workflow_dispatch:
    inputs:
      ssh_action:
        description: '在编译失败或完成后，通过 tmate 开启一个 SSH 会话进行调试。'
        required: false
        default: 'false'

env:
  # 源码仓库 - 关键修正：使用经过验证支持 msm8916 的仓库
  REPO_URL: https://github.com/lkiuyu/immortalwrt
  REPO_BRANCH: master # lkiuyu 的主分支包含了 msm8916 支持

  # 配置文件 - 请确保您的仓库根目录下有这个文件
  CONFIG_FILE: jz02.config

  # 自定义脚本 - 请确保您的仓库根目录下有这两个文件（如果需要）
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  
  # 其他环境变量
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出当前仓库代码
      uses: actions/checkout@v4
      # 这个步骤会将您仓库里的 .config 文件和 diy 脚本拉取到 Runner 环境中

    - name: 初始化编译环境
      run: |
        echo "::group::安装依赖"
        sudo rm -rf /etc/apt/sources.list.d/*
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
        gettext git-core libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
        file wget
        echo "::endgroup::"

    - name: 清理 Runner 磁盘空间 (增加编译成功率)
      run: |
        echo "::group::清理磁盘空间"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
        echo "::endgroup::"

    - name: 克隆并准备 ImmortalWrt 源码
      id: clone_source
      run: |
        echo "::group::克隆源码"
        git clone --depth 1 -b $REPO_BRANCH $REPO_URL immortalwrt
        cd immortalwrt
        echo "FIRMWARE_DIR=$(pwd)" >> $GITHUB_OUTPUT
        echo "::endgroup::"
      
    - name: 加载自定义配置和脚本
      run: |
        cd immortalwrt
        
        echo "::group::执行自定义脚本 Part 1"
        # 如果 DIY_P1_SH 文件存在，则赋予执行权限并运行
        if [ -f "${{ github.workspace }}/${{ env.DIY_P1_SH }}" ]; then
          echo "找到 diy-part1.sh，开始执行..."
          chmod +x "${{ github.workspace }}/${{ env.DIY_P1_SH }}"
          "${{ github.workspace }}/${{ env.DIY_P1_SH }}"
        else
          echo "未找到 diy-part1.sh，跳过。"
        fi
        echo "::endgroup::"

        echo "::group::更新与安装 Feeds"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "::endgroup::"

        echo "::group::加载自定义 .config 文件"
        # 如果 CONFIG_FILE 文件存在，则复制为 .config
        if [ -f "${{ github.workspace }}/${{ env.CONFIG_FILE }}" ]; then
          echo "找到 ${CONFIG_FILE}，复制为 .config..."
          cp "${{ github.workspace }}/${{ env.CONFIG_FILE }}" .config
        else
          echo "警告：未找到 ${CONFIG_FILE}，将使用默认配置！"
          make defconfig
        fi
        echo "::endgroup::"
        
        echo "::group::执行自定义脚本 Part 2"
        # 如果 DIY_P2_SH 文件存在，则赋予执行权限并运行
        if [ -f "${{ github.workspace }}/${{ env.DIY_P2_SH }}" ]; then
          echo "找到 diy-part2.sh，开始执行..."
          chmod +x "${{ github.workspace }}/${{ env.DIY_P2_SH }}"
          "${{ github.workspace }}/${{ env.DIY_P2_SH }}"
        else
          echo "未找到 diy-part2.sh，跳过。"
        fi
        echo "::endgroup::"

        echo "::group::标准化配置文件 (make defconfig)"
        # 这一步至关重要，它会补全所有依赖，防止配置被重置
        make defconfig
        echo "::endgroup::"

    - name: 编译固件 (核心步骤)
      id: compile
      run: |
        cd immortalwrt
        
        echo "::group::开始编译 (单线程，详细日志模式)"
        # 核心优化：强制使用 -j1 V=s，保证稳定性和日志详细度
        make -j1 V=s
        
        # 核心优化：增加严格的错误检查
        if [ $? -ne 0 ]; then
          echo "::error::编译失败！"
          exit 1
        fi
        echo "::endgroup::"
        
        # 编译成功后，设置输出变量
        echo "status=success" >> $GITHUB_OUTPUT
        # 注意路径中的 msm8916，确保它与您的目标一致
        FIRMWARE_PATH=$(ls bin/targets/msm89xx/msm8916/*-sysupgrade.bin 2>/dev/null | head -n 1)
        if [ -z "$FIRMWARE_PATH" ]; then
            echo "::warning::未找到 sysupgrade.bin 文件！请检查编译结果。"
            # 列出所有生成的文件以供调试
            find bin/targets/msm89xx/msm8916/ -type f
        else
            echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        fi

    - name: SSH 远程调试 (如果需要)
      if: (failure() || success()) && inputs.ssh_action == 'true'
      uses: mxschmitt/action-tmate@v3
      with:
        working-directory: ${{ steps.clone_source.outputs.FIRMWARE_DIR }}

    - name: 整理固件文件 (编译成功后执行)
      if: success() && steps.compile.outputs.status == 'success'
      run: |
        cd immortalwrt
        echo "::group::整理固件文件"
        FIRMWARE_DIR="firmware_release"
        mkdir -p $FIRMWARE_DIR
        if [ -n "${{ env.FIRMWARE_PATH }}" ]; then
          cp ${{ env.FIRMWARE_PATH }} $FIRMWARE_DIR/
          echo "固件已复制到 $FIRMWARE_DIR"
        else
          echo "未找到固件路径，跳过复制。"
        fi
        # 您也可以在这里复制其他需要的文件，比如 .config
        cp .config $FIRMWARE_DIR/config.buildinfo
        echo "::endgroup::"

    - name: 上传固件到 Actions Artifacts (编译成功后执行)
      if: success() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: ImmortalWrt_msm8916_Firmware
        path: immortalwrt/firmware_release/
