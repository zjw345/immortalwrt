#
# ======================================================================================
# 最终优化版 GitHub Actions Workflow v4 - by Gemini Pro Deep Reasoning
#
# 变更日志:
# v4: 采用最原生的方式解决 `mkbootimg: command not found` 错误。
#     移除了 `apt-get install mkbootimg` 步骤，改为通过 .config 文件中的
#     `CONFIG_PACKAGE_uboot-tools-mkbootimg=y` 选项，让 ImmortalWrt 构建系统
#     自行编译和提供版本匹配的 mkbootimg 工具，方案更健壮、更可复现。单线程。
#
# ======================================================================================
#

name: JZ02V10 (v4 - Native mkbootimg)

on:
  workflow_dispatch:
    inputs:
      ssh_action:
        description: '在编译结束后（无论成功或失败），通过 tmate 开启 SSH 会话进行调试。'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/lkiuyu/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: jz02.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 1. 检出仓库代码 (Checkout Files)
      uses: actions/checkout@v4

    - name: 2. 准备编译环境 (Initialize Environment & Free Space)
      run: |
        echo "::group::安装核心编译依赖"
        sudo apt-get update
        # 核心修正：移除 mkbootimg，因为构建系统会自己编译
        sudo apt-get install -y build-essential flex bison g++ gawk gcc-multilib g++-multilib \
        gettext git-core libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
        file wget mkbootimg android-sdk-libsparse-utils
        echo "::endgroup::"

        echo "::group::清理 Runner 磁盘空间"
        echo "清理前空间:" && df -h
        sudo rm -rf /usr/share/dotnet /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
        echo "清理后空间:" && df -h
        echo "::endgroup::"
        
        sudo timedatectl set-timezone "$TZ"

    - name: 3. 克隆 ImmortalWrt 源码 (Clone Source)
      run: |
        git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt

    - name: 4. 加载自定义内容 (Load Customizations)
      working-directory: ./openwrt
      run: |
        echo "::group::执行自定义脚本 Part 1 (Before Feeds)"
        if [ -f "${{ github.workspace }}/${{ env.DIY_P1_SH }}" ]; then
          chmod +x "${{ github.workspace }}/${{ env.DIY_P1_SH }}"
          "${{ github.workspace }}/${{ env.DIY_P1_SH }}"
        else
          echo "未找到 diy-part1.sh，跳过。"
        fi
        echo "::endgroup::"

        echo "::group::更新与安装 Feeds"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "::endgroup::"

        echo "::group::执行自定义脚本 Part 2 (After Feeds)"
        if [ -f "${{ github.workspace }}/${{ env.DIY_P2_SH }}" ]; then
          chmod +x "${{ github.workspace }}/${{ env.DIY_P2_SH }}"
          "${{ github.workspace }}/${{ env.DIY_P2_SH }}"
        else
          echo "未找到 diy-part2.sh，跳过。"
        fi
        echo "::endgroup::"

    - name: 5. 加载并标准化编译配置 (Load & Finalize Config)
      working-directory: ./openwrt
      run: |
        echo "::group::加载 .config 文件并进行标准化"
        if [ -f "${{ github.workspace }}/${{ env.CONFIG_FILE }}" ]; then
          cp "${{ github.workspace }}/${{ env.CONFIG_FILE }}" .config
          echo ".config 文件已加载。"
        else
          echo "::error::未找到配置文件: ${CONFIG_FILE}！ 编译无法继续。"
          exit 1
        fi
        make defconfig
        echo "配置文件已标准化。"
        echo "::endgroup::"

    - name: 6. 预下载所有软件包源码 (Download Packages)
      working-directory: ./openwrt
      run: |
        echo "::group::开始预下载所有软件包源码"
        make download -j8
        find dl -size -1k -exec rm -f {} \;
        echo "::endgroup::"

    - name: 7. 编译固件 (Compile Firmware)
      id: compile
      working-directory: ./openwrt
      run: |
        echo "::group::开始编译固件 (单线程, 详细日志模式)"
        make -j1 V=s
        if [ $? -ne 0 ]; then
          echo "::error::编译失败！请检查上述详细日志以确定问题。"
          exit 1
        fi
        echo "::endgroup::"
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FIRMWARE_PATH=$(ls bin/targets/msm89xx/msm8916/*-sysupgrade.bin 2>/dev/null | head -n 1)" >> $GITHUB_ENV

    - name: 8. SSH 远程调试 (按需触发)
      if: (failure() || success()) && inputs.ssh_action == 'true'
      uses: mxschmitt/action-tmate@v3
      with:
        working-directory: ./openwrt

    - name: 9. 整理并上传产物 (Upload Artifacts)
      if: success()
      id: organize
      run: |
        echo "::group::整理并上传固件"
        cd openwrt
        mkdir -p release
        FIRMWARE_PATH="${{ env.FIRMWARE_PATH }}"
        if [ -n "$FIRMWARE_PATH" ]; then
          cp $FIRMWARE_PATH release/
          FACTORY_IMG=$(ls bin/targets/msm89xx/msm8916/*-factory.img 2>/dev/null | head -n 1)
          if [ -n "$FACTORY_IMG" ]; then
            cp $FACTORY_IMG release/
          fi
          cp .config release/config.buildinfo
          sha256sum release/* > release/sha256sums.txt
          echo "FIRMWARE_RELEASE_DIR=$(pwd)/release" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "::error::编译成功但未找到 sysupgrade 文件！"
          find bin/targets -type f
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "::endgroup::"
      
    - name: 上传到 Actions Artifacts
      if: steps.organize.outputs.status == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: ImmortalWrt_Firmware_msm8916_${{ github.run_id }}
        path: ${{ env.FIRMWARE_RELEASE_DIR }}
